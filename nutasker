#!/usr/bin/env nu

def getDataDir [] {
  let script_dir = $env.CURRENT_FILE | path dirname
  let nutask_dir = $script_dir | path join "store"
  if not ($nutask_dir | path exists) {
    mkdir $nutask_dir
  }
  $nutask_dir
}

def getTasks [file:string] {
  if ($file | path exists) {
    open $file
  } else { [] }
}

def saveTask [name: string, length: duration, file: string, daily?: bool] {
  let t = (match $daily { null => { name: $name length: $length } _ => { name: $name length: $length daily: $daily} })
  let updated = (getTasks $file | append $t)
  $updated | save -f $file
}

let data_dir = getDataDir
let dailyTasks = { getTasks ($data_dir | path join "daily-tasks.nuon") }
let tasks = { getTasks ($data_dir | path join "tasks.nuon") }
let snoozedTasks = { getTasks ($data_dir | path join "snoozed-tasks.nuon") }

# generate password for encryption
def "main generate-keys" [] {
  let script_dir = $env.CURRENT_FILE | path dirname
  let password_file = ($script_dir | path join "password.secret")
  ^openssl rand -base64 32 | save $password_file
  print $"Password generated: ($password_file)"
}

# encrypt the store folder
def "main encrypt" [] {
  let script_dir = $env.CURRENT_FILE | path dirname
  let password_file = ($script_dir | path join "password.secret")
  if not ($password_file | path exists) {
    print $"(ansi red_bold)No password found. Run 'generate-keys' first.(ansi reset)"
    return
  }
  cd $script_dir
  ^tar czf - store | ^openssl enc -aes-256-cbc -pbkdf2 -salt -pass $"file:($password_file)" -out store.enc
  print "Store encrypted to store.enc"
}

# decrypt the store folder
def "main decrypt" [] {
  let script_dir = $env.CURRENT_FILE | path dirname
  let password_file = ($script_dir | path join "password.secret")
  if not ($password_file | path exists) {
    print $"(ansi red_bold)No password found.(ansi reset)"
    return
  }
  cd $script_dir
  ^openssl enc -aes-256-cbc -pbkdf2 -d -salt -pass $"file:($password_file)" -in store.enc | ^tar xzf -
  print "Store decrypted from store.enc"
}

def main [] { help main }

# create a new task
def "main add" [name: string, length: duration, --daily (-d)] {
  if $daily {
    saveTask $name $length ($data_dir | path join "daily-tasks.nuon")
  } else {
    saveTask $name $length ($data_dir | path join "tasks.nuon") false
  }
}

# list tasks
def "main list" [
  --section (-s): string
  ] {
  match $section {
    "daily" => (do $dailyTasks)
  
    "snoozed" => (do $snoozedTasks)

    "tasks" => (do $tasks)

    null => (do $tasks)

    _ => $"(ansi red_bold)that section doesnt exist !(ansi reset)"
  }
}

# reset the task list; resets daily tasks, and adds snoozed tasks 
def "main reset" [] {
  do $tasks | where daily == false | collect | save -f ($data_dir | path join "tasks.nuon")
  for item in (do $dailyTasks) {
    saveTask $item.name $item.length ($data_dir | path join "tasks.nuon") true
  }
  for item in (do $snoozedTasks) {
    saveTask $item.name $item.length ($data_dir | path join "tasks.nuon") true
  }
  let snoozed_file = ($data_dir | path join "snoozed-tasks.nuon")
  if ($snoozed_file | path exists) { rm $snoozed_file }
}

# snooze a task; snoozed tasks are added back on next reset
def "main snooze" [name: string] {
  let newList = do $tasks | where name != $name
  let snoozedTask = do $tasks | where name == $name | reject daily
  $snoozedTask | save -f ($data_dir | path join "snoozed-tasks.nuon")
  $newList | save -f ($data_dir | path join "tasks.nuon")
}

# remove a task by name
def "main remove" [name: string] {
  let newList = do $tasks | where name != $name
  $newList | save -f ($data_dir | path join "tasks.nuon")
}

# add and push all changes to github
def "push" [] {
  let script_dir = $env.CURRENT_FILE | path dirname
  nu -c $'cd ($script_dir); git add --all; git commit; git push'
}