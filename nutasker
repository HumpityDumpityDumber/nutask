#!/usr/bin/env nu

# set script directory
let script_dir = $env.CURRENT_FILE | path dirname

# --- inner functions ---

def getDataDir [] {
  let nutask_dir = $script_dir | path join "store"
  if not ($nutask_dir | path exists) {
    mkdir $nutask_dir
  }
  $nutask_dir
}

def getTasks [file:string] {
  if ($file | path exists) {
    open $file
  } else { [] }
}

def saveTask [name: string, length: duration, file: string, daily?: bool] {
  let t = (match $daily { null => { name: $name length: $length } _ => { name: $name length: $length daily: $daily} })
  let updated = (getTasks $file | append $t)
  $updated | save -f $file
}

# --- set variables ---
let data_dir = getDataDir
let dailyTasks = { getTasks ($data_dir | path join "daily-tasks.nuon") }
let tasks = { getTasks ($data_dir | path join "tasks.nuon") }
let snoozedTasks = { getTasks ($data_dir | path join "snoozed-tasks.nuon") }

# --- main functions ---

def main [] { help main }

# --- encryption functions ---

# generate password for encryption
def "main generate-keys" [] {
  let password_file = ($script_dir | path join "password.secret")
  random chars --length 1kb | save $password_file
  print $"Password generated: ($password_file)"
}

# encrypt the store folder
def "main encrypt" [] {
  let password_file = ($script_dir | path join "password.secret")
  if not ($password_file | path exists) {
    print $"(ansi red_bold)No password found. Run 'generate-keys' first.(ansi reset)"
    return
  }
  cd $script_dir
  ^tar czf - store | ^openssl enc -aes-256-cbc -pbkdf2 -salt -pass $"file:($password_file)" -out store.enc
  print "Store encrypted to store.enc"
}

# decrypt the store folder
def "main decrypt" [] {
  let password_file = ($script_dir | path join "password.secret")
  if not ($password_file | path exists) {
    print $"(ansi red_bold)No password found.(ansi reset)"
    return
  }
  cd $script_dir
  ^openssl enc -aes-256-cbc -pbkdf2 -d -salt -pass $"file:($password_file)" -in store.enc | ^tar xzf -
  print "Store decrypted from store.enc"
}

# --- task functions ---

# create a new task
def "main add" [name: string, length: duration, --daily (-d)] {
  if $daily {
    saveTask $name $length ($data_dir | path join "daily-tasks.nuon")
  } else {
    saveTask $name $length ($data_dir | path join "tasks.nuon") false
  }
}

# remove a task by name
def "main remove" [name: any] {
  let task_list = do $tasks
    let task_name = (
      if ($name | describe) == "int" {
        let idx = $name
        if $idx < 0 or $idx >= ($task_list | length) {
          print $"(ansi red_bold)Index ($idx) out of range.(ansi reset)"
          return
        }
        ($task_list | get $idx | get name)
      } else {
        $name
      }
    )

    let newList = $task_list | where name != $task_name
    $newList | save -f ($data_dir | path join "tasks.nuon")
}

# list tasks
def "main list" [
  --section (-s): string
  ] {
  match $section {
    "daily" => (do $dailyTasks)
  
    "snoozed" => (do $snoozedTasks)

    "tasks" => (do $tasks)

    null => (do $tasks)

    _ => $"(ansi red_bold)that section doesnt exist !(ansi reset)"
  }
}

# reset the task list; resets daily tasks, and adds snoozed tasks 
def "main reset" [] {
  do $tasks | where daily == false | collect | save -f ($data_dir | path join "tasks.nuon")
  for item in (do $dailyTasks) {
    saveTask $item.name $item.length ($data_dir | path join "tasks.nuon") true
  }
  for item in (do $snoozedTasks) {
    saveTask $item.name $item.length ($data_dir | path join "tasks.nuon") true
  }
  let snoozed_file = ($data_dir | path join "snoozed-tasks.nuon")
  if ($snoozed_file | path exists) { rm $snoozed_file }
}

# snooze a task; snoozed tasks are added back on next reset
def "main snooze" [name: any] {
  let task_list = do $tasks
    let task_name = (
      if ($name | describe) == "int" {
        let idx = $name
        if $idx < 0 or $idx >= ($task_list | length) {
          print $"(ansi red_bold)Index ($idx) out of range.(ansi reset)"
          return
        }
        ($task_list | get $idx | get name)
      } else {
        $name
      }
    )

    let newList = $task_list | where name != $task_name
    let snoozedTask = $task_list | where name == $task_name | reject daily

    let snoozed_file = ($data_dir | path join "snoozed-tasks.nuon")
    let existingSnoozed = getTasks $snoozed_file
    let updatedSnoozed = ($existingSnoozed | append $snoozedTask)

    $updatedSnoozed | save -f $snoozed_file
    $newList | save -f ($data_dir | path join "tasks.nuon")
}

# execute a task with progress bar and remove when done
def "main do" [name: any] {
  let task_list = do $tasks
    let task_name = (
      if ($name | describe) == "int" {
        let idx = $name
        if $idx < 0 or $idx >= ($task_list | length) {
          print $"(ansi red_bold)Index ($idx) out of range.(ansi reset)"
          return
        }
        ($task_list | get $idx | get name)
      } else {
        $name
      }
    )

    let task = ($task_list | where name == $task_name | first)

    if ($task | is-empty) {
      print $"(ansi red_bold)Task '($task_name)' not found. (ansi reset)"
      return
    }

    print $"(ansi green_bold)Starting: ($task_name) (($task.length))(ansi reset)"

    let duration_ms = ($task.length | into int) / 1_000_000
    let start = (date now)

    loop {
      let elapsed = (((date now) - $start) | into int) / 1_000_000
      let progress = ($elapsed * 100) / $duration_ms
      if $progress >= 100 { break }
      let filled = ($progress / 2) | math floor
      let remaining = ((($duration_ms - $elapsed) / 1000) | math floor) * 1sec
      let bar = ((0..<$filled | each { "█" } | str join) + (0..<(50 - $filled) | each { "░" } | str join))
      print -n $"\r(ansi cyan)[($bar)] ($progress | math round -p 1)% - ($remaining)"
      sleep 100ms
    }

    print $"\r(ansi green)[██████████████████████████████████████████████████] 100.0% - Complete!     (ansi reset)"
    print $"(ansi green_bold)Press any key to finish...(ansi reset)"
    input listen --types [key] | ignore

    main remove $task_name
    print $"(ansi green)✓ ($task_name) completed!(ansi reset)"
}

# --- github interaction functions ---

# add and push all changes to github
def "main push" [] {
  cd ($script_dir); git add --all; git commit -m $"add tasks"; git push
}

def "main update" [] {
  cd ($script_dir); git pull
}