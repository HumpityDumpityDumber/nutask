#!/usr/bin/env nu
 
def getTasks [file:string] {
  if ($file | path exists) {
    open $file
  } else { [] }
}

let dailyTasks = { getTasks "./daily-tasks.nuon" }
let tasks = { getTasks "./tasks.nuon" }
let snoozedTasks = { getTasks "./snoozed-tasks.nuon" }

def saveTask [name: string, length: duration, file: string, daily?: bool] {
  let t = (match $daily { null => { name: $name length: $length } _ => { name: $name length: $length daily: $daily} })
  let updated = (getTasks $file | append $t)
  $updated | save -f $file
}

def main [] { help main }

# create a new task
def "main add" [name: string, length: duration, --daily] {
  if $daily {
    saveTask $name $length "./daily-tasks.nuon"
  } else {
    saveTask $name $length "./tasks.nuon" false
  }
}

# list tasks
def "main list" [
  --section (-s): string
  ] {
  match $section {
    "daily" => (do $dailyTasks)
  
    "snoozed" => (do $snoozedTasks)

    "tasks" => (do $tasks)

    null => (do $tasks)

    _ => $"(ansi red_bold)that section doesnt exist !(ansi reset)"
  }
}

# reset the task list; resets daily tasks, and adds snoozed tasks 
def "main reset" [] {
  do $tasks | where daily == false | collect | save -f "./tasks.nuon"
  for item in (do $dailyTasks) {
    saveTask $item.name $item.length "./tasks.nuon" true
  }
  for item in (do $snoozedTasks) {
    saveTask $item.name $item.length "./tasks.nuon" true
  }
  if ("./snoozed-tasks.nuon" | path exists) { rm "./snoozed-tasks.nuon" }
}

# snooze a task; snoozed tasks are added back on next reset
def "main snooze" [name: string] {
  let newList = do $tasks | where name != $name
  let snoozedTask = do $tasks | where name == $name | reject daily
  $snoozedTask | save -f ./snoozed-tasks.nuon
  $newList | save -f "./tasks.nuon"
}

def "main remove" [name: string] {
  let newList = do $tasks | where name != $name
  $newList | save -f "./tasks.nuon"
}